version: '3'
services:
  jenkins:
    build:
      context: jenkins
    image: pregatit-docker-jenkins
    privileged: true
    user: root
    ports:
     - 8080:8080
     - 50000:50000
    container_name: jenkins
    volumes:
     - "$PWD/jenkins/jenkins_configuration:/var/jenkins_home"
     - /var/run/docker.sock:/var/run/docker.sock
     - /usr/local/bin/docker:/usr/local/bin/docker

  demo-app-python:
    build:
      context: .
      dockerfile: Dockerfile
    image: pregatit-demo-app-python
    ports:
     - 5000:5000
    container_name: demo-app-python

#   db:
#     image: postgres
#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#   web:
#     build: .
#     command: python manage.py runserver 0.0.0.0:8000
#     volumes:
#       - .:/src/django
#     ports:
#       - "8000:8000"
#     environment:
#       - POSTGRES_NAME=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#     depends_on:
#       - db
    
#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
#     container_name: elasticsearch
#     environment:
#       - xpack.security.enabled=false
#       - discovery.type=single-node
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#       nofile:
#         soft: 65536
#         hard: 65536
#     cap_add:
#       - IPC_LOCK
#     volumes:
#       - elasticsearch-data:/usr/share/elasticsearch/data
#     ports:
#       - 9200:9200
#       - 9300:9300

#   kibana:
#     container_name: kibana
#     image: docker.elastic.co/kibana/kibana:7.4.0
#     environment:
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     ports:
#       - 5601:5601
#     depends_on:
#       - elasticsearch
      
# volumes:
#   elasticsearch-data:
#     driver: local
#   postgres:
#     container_name: postgres_container
#     image: postgres
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER:-postgres}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
#       PGDATA: /data/postgres
#     volumes:
#        - postgres:/data/postgres
#     ports:
#       - "5433:5433"
#     networks:
#       - postgres
#     restart: unless-stopped
  
#   pgadmin:
#     container_name: pgadmin_container
#     image: dpage/pgadmin4
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#       PGADMIN_CONFIG_SERVER_MODE: 'False'
#     volumes:
#        - pgadmin:/var/lib/pgadmin

#     ports:
#       - "${PGADMIN_PORT:-5050}:80"
#     networks:
#       - postgres
#     restart: unless-stopped

#   python_postgres:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     image: python_postgres
#     ports:
#       - 5001:5001
    
#     depends_on:
#       - postgres
#     container_name: python_postgres

# networks:
#   postgres:
#     driver: bridge

# volumes:
#     postgres:
#     pgadmin: